

@app.post("/api/langflow/trigger")
async def trigger_flow(request: Request, background_tasks: BackgroundTasks):
    data = await request.json()
    flow_id = data.get("flowId")
    trigger_type = data.get("triggerType") 
    input_payload = data.get("inputPayload")
    run_id = f"run_{flow_id}_{datetime.now().timestamp()}"
    
    # Create and store initial run
    run = WorkflowRun(
        id=run_id,
        flow_id=flow_id,
        status="started",
        start_time=datetime.now().timestamp()
    )
    store_run(run)

    async def run_flow():
        logger.info(f"Starting flow execution: {flow_id}")
        start_time = datetime.now().timestamp()
        
        try:
            # Simulate processing time
            await asyncio.sleep(2)
            
            # Update run status
            run.end_time = datetime.now().timestamp()
            run.duration = run.end_time - run.start_time
            run.status = "completed"
            store_run(run)
            
            logger.info(f"Completed flow execution: {flow_id}")
        except Exception as e:
            logger.error(f"Error in flow execution: {str(e)}")
            run.status = "failed"
            store_run(run)

    background_tasks.add_task(run_flow)
    return {"runId": run_id, "status": "started"}

@app.get("/api/langflow/runs/{run_id}/stream")
async def stream_logs(run_id: str):
    async def event_generator():
        messages = [
            f"Initializing {run_id}",
            "Loading dependencies...",
            "Processing input...",
            "Generating output...",
            "Execution completed successfully"
        ]
        for msg in messages:
            await asyncio.sleep(1)
            yield f"data: {msg}\n\n"
    return StreamingResponse(event_generator(), media_type="text/event-stream")
